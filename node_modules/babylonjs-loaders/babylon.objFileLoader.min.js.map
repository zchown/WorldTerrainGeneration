{"version":3,"file":"babylon.objFileLoader.min.js","mappings":"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","sources":["webpack://LOADERS/webpack/universalModuleDefinition","webpack://LOADERS/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://LOADERS/webpack/bootstrap","webpack://LOADERS/webpack/runtime/define property getters","webpack://LOADERS/webpack/runtime/global","webpack://LOADERS/webpack/runtime/hasOwnProperty shorthand","webpack://LOADERS/webpack/runtime/make namespace object","webpack://LOADERS/../../../dev/loaders/src/OBJ/mtlFileLoader.ts","webpack://LOADERS/../../../dev/loaders/src/OBJ/solidParser.ts","webpack://LOADERS/../../../dev/loaders/src/OBJ/objFileLoader.ts","webpack://LOADERS/../../../lts/loaders/src/legacy/legacy-objFileLoader.ts","webpack://LOADERS/./src/objFileLoader.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-loaders\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-loaders\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"LOADERS\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__597__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__597__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\n/**\r\n * Class reading and parsing the MTL file bundled with the obj file.\r\n */\r\nexport class MTLFileLoader {\r\n    /**\r\n     * Invert Y-Axis of referenced textures on load\r\n     */\r\n    public static INVERT_TEXTURE_Y = true;\r\n\r\n    /**\r\n     * All material loaded from the mtl will be set here\r\n     */\r\n    public materials: StandardMaterial[] = [];\r\n\r\n    /**\r\n     * This function will read the mtl file and create each material described inside\r\n     * This function could be improve by adding :\r\n     * -some component missing (Ni, Tf...)\r\n     * -including the specific options available\r\n     *\r\n     * @param scene defines the scene the material will be created in\r\n     * @param data defines the mtl data to parse\r\n     * @param rootUrl defines the rooturl to use in order to load relative dependencies\r\n     * @param assetContainer defines the asset container to store the material in (can be null)\r\n     */\r\n    public parseMTL(scene: Scene, data: string | ArrayBuffer, rootUrl: string, assetContainer: Nullable<AssetContainer>): void {\r\n        if (data instanceof ArrayBuffer) {\r\n            return;\r\n        }\r\n\r\n        //Split the lines from the file\r\n        const lines = data.split(\"\\n\");\r\n        // whitespace char ie: [ \\t\\r\\n\\f]\r\n        const delimiter_pattern = /\\s+/;\r\n        //Array with RGB colors\r\n        let color: number[];\r\n        //New material\r\n        let material: Nullable<StandardMaterial> = null;\r\n\r\n        //Look at each line\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i].trim();\r\n\r\n            // Blank line or comment\r\n            if (line.length === 0 || line.charAt(0) === \"#\") {\r\n                continue;\r\n            }\r\n\r\n            //Get the first parameter (keyword)\r\n            const pos = line.indexOf(\" \");\r\n            let key = pos >= 0 ? line.substring(0, pos) : line;\r\n            key = key.toLowerCase();\r\n\r\n            //Get the data following the key\r\n            const value: string = pos >= 0 ? line.substring(pos + 1).trim() : \"\";\r\n\r\n            //This mtl keyword will create the new material\r\n            if (key === \"newmtl\") {\r\n                //Check if it is the first material.\r\n                // Materials specifications are described after this keyword.\r\n                if (material) {\r\n                    //Add the previous material in the material array.\r\n                    this.materials.push(material);\r\n                }\r\n                //Create a new material.\r\n                // value is the name of the material read in the mtl file\r\n\r\n                scene._blockEntityCollection = !!assetContainer;\r\n                material = new StandardMaterial(value, scene);\r\n                material._parentContainer = assetContainer;\r\n                scene._blockEntityCollection = false;\r\n            } else if (key === \"kd\" && material) {\r\n                // Diffuse color (color under white light) using RGB values\r\n\r\n                //value  = \"r g b\"\r\n                color = <number[]>value.split(delimiter_pattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set tghe color into the material\r\n                material.diffuseColor = Color3.FromArray(color);\r\n            } else if (key === \"ka\" && material) {\r\n                // Ambient color (color under shadow) using RGB values\r\n\r\n                //value = \"r g b\"\r\n                color = <number[]>value.split(delimiter_pattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set tghe color into the material\r\n                material.ambientColor = Color3.FromArray(color);\r\n            } else if (key === \"ks\" && material) {\r\n                // Specular color (color when light is reflected from shiny surface) using RGB values\r\n\r\n                //value = \"r g b\"\r\n                color = <number[]>value.split(delimiter_pattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set the color into the material\r\n                material.specularColor = Color3.FromArray(color);\r\n            } else if (key === \"ke\" && material) {\r\n                // Emissive color using RGB values\r\n                color = value.split(delimiter_pattern, 3).map(parseFloat);\r\n                material.emissiveColor = Color3.FromArray(color);\r\n            } else if (key === \"ns\" && material) {\r\n                //value = \"Integer\"\r\n                material.specularPower = parseFloat(value);\r\n            } else if (key === \"d\" && material) {\r\n                //d is dissolve for current material. It mean alpha for BABYLON\r\n                material.alpha = parseFloat(value);\r\n\r\n                //Texture\r\n                //This part can be improved by adding the possible options of texture\r\n            } else if (key === \"map_ka\" && material) {\r\n                // ambient texture map with a loaded image\r\n                //We must first get the folder of the image\r\n                material.ambientTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_kd\" && material) {\r\n                // Diffuse texture map with a loaded image\r\n                material.diffuseTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_ks\" && material) {\r\n                // Specular texture map with a loaded image\r\n                //We must first get the folder of the image\r\n                material.specularTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_ns\") {\r\n                //Specular\r\n                //Specular highlight component\r\n                //We must first get the folder of the image\r\n                //\r\n                //Not supported by BABYLON\r\n                //\r\n                //    continue;\r\n            } else if (key === \"map_bump\" && material) {\r\n                //The bump texture\r\n                const values = value.split(delimiter_pattern);\r\n                const bumpMultiplierIndex = values.indexOf(\"-bm\");\r\n                let bumpMultiplier: Nullable<string> = null;\r\n\r\n                if (bumpMultiplierIndex >= 0) {\r\n                    bumpMultiplier = values[bumpMultiplierIndex + 1];\r\n                    values.splice(bumpMultiplierIndex, 2); // remove\r\n                }\r\n\r\n                material.bumpTexture = MTLFileLoader._GetTexture(rootUrl, values.join(\" \"), scene);\r\n                if (material.bumpTexture && bumpMultiplier !== null) {\r\n                    material.bumpTexture.level = parseFloat(bumpMultiplier);\r\n                }\r\n            } else if (key === \"map_d\" && material) {\r\n                // The dissolve of the material\r\n                material.opacityTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n\r\n                //Options for illumination\r\n            } else if (key === \"illum\") {\r\n                //Illumination\r\n                if (value === \"0\") {\r\n                    //That mean Kd == Kd\r\n                } else if (value === \"1\") {\r\n                    //Color on and Ambient on\r\n                } else if (value === \"2\") {\r\n                    //Highlight on\r\n                } else if (value === \"3\") {\r\n                    //Reflection on and Ray trace on\r\n                } else if (value === \"4\") {\r\n                    //Transparency: Glass on, Reflection: Ray trace on\r\n                } else if (value === \"5\") {\r\n                    //Reflection: Fresnel on and Ray trace on\r\n                } else if (value === \"6\") {\r\n                    //Transparency: Refraction on, Reflection: Fresnel off and Ray trace on\r\n                } else if (value === \"7\") {\r\n                    //Transparency: Refraction on, Reflection: Fresnel on and Ray trace on\r\n                } else if (value === \"8\") {\r\n                    //Reflection on and Ray trace off\r\n                } else if (value === \"9\") {\r\n                    //Transparency: Glass on, Reflection: Ray trace off\r\n                } else if (value === \"10\") {\r\n                    //Casts shadows onto invisible surfaces\r\n                }\r\n            } else {\r\n                // console.log(\"Unhandled expression at line : \" + i +'\\n' + \"with value : \" + line);\r\n            }\r\n        }\r\n        //At the end of the file, add the last material\r\n        if (material) {\r\n            this.materials.push(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the texture for the material.\r\n     *\r\n     * If the material is imported from input file,\r\n     * We sanitize the url to ensure it takes the texture from aside the material.\r\n     *\r\n     * @param rootUrl The root url to load from\r\n     * @param value The value stored in the mtl\r\n     * @param scene\r\n     * @returns The Texture\r\n     */\r\n    private static _GetTexture(rootUrl: string, value: string, scene: Scene): Nullable<Texture> {\r\n        if (!value) {\r\n            return null;\r\n        }\r\n\r\n        let url = rootUrl;\r\n        // Load from input file.\r\n        if (rootUrl === \"file:\") {\r\n            let lastDelimiter = value.lastIndexOf(\"\\\\\");\r\n            if (lastDelimiter === -1) {\r\n                lastDelimiter = value.lastIndexOf(\"/\");\r\n            }\r\n\r\n            if (lastDelimiter > -1) {\r\n                url += value.substr(lastDelimiter + 1);\r\n            } else {\r\n                url += value;\r\n            }\r\n        }\r\n        // Not from input file.\r\n        else {\r\n            url += value;\r\n        }\r\n\r\n        return new Texture(url, scene, false, MTLFileLoader.INVERT_TEXTURE_Y);\r\n    }\r\n}\r\n","import type { AssetContainer } from \"core/assetContainer\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { OBJLoadingOptions } from \"./objLoadingOptions\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ntype MeshObject = {\r\n    name: string;\r\n    indices: Nullable<Array<number>>;\r\n    positions: Nullable<Array<number>>;\r\n    normals: Nullable<Array<number>>;\r\n    colors: Nullable<Array<number>>;\r\n    uvs: Nullable<Array<number>>;\r\n    materialName: string;\r\n    directMaterial?: Nullable<Material>;\r\n    isObject: boolean; // If the entity is defined as an object (\"o\"), or group (\"g\")\r\n    _babylonMesh?: AbstractMesh; // The corresponding Babylon mesh\r\n};\r\n\r\n/**\r\n * Class used to load mesh data from OBJ content\r\n */\r\nexport class SolidParser {\r\n    // Descriptor\r\n    /** Object descriptor */\r\n    public static ObjectDescriptor = /^o/;\r\n    /** Group descriptor */\r\n    public static GroupDescriptor = /^g/;\r\n    /** Material lib descriptor */\r\n    public static MtlLibGroupDescriptor = /^mtllib /;\r\n    /** Use a material descriptor */\r\n    public static UseMtlDescriptor = /^usemtl /;\r\n    /** Smooth descriptor */\r\n    public static SmoothDescriptor = /^s /;\r\n\r\n    // Patterns\r\n    /** Pattern used to detect a vertex */\r\n    public static VertexPattern = /^v(\\s+[\\d|.|+|\\-|e|E]+){3,7}/;\r\n    /** Pattern used to detect a normal */\r\n    public static NormalPattern = /^vn(\\s+[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)/;\r\n    /** Pattern used to detect a UV set */\r\n    public static UVPattern = /^vt(\\s+[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)/;\r\n    /** Pattern used to detect a first kind of face (f vertex vertex vertex) */\r\n    public static FacePattern1 = /^f\\s+(([\\d]{1,}[\\s]?){3,})+/;\r\n    /** Pattern used to detect a second kind of face (f vertex/uvs vertex/uvs vertex/uvs) */\r\n    public static FacePattern2 = /^f\\s+((([\\d]{1,}\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a third kind of face (f vertex/uvs/normal vertex/uvs/normal vertex/uvs/normal) */\r\n    public static FacePattern3 = /^f\\s+((([\\d]{1,}\\/[\\d]{1,}\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a fourth kind of face (f vertex//normal vertex//normal vertex//normal)*/\r\n    public static FacePattern4 = /^f\\s+((([\\d]{1,}\\/\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a fifth kind of face (f -vertex/-uvs/-normal -vertex/-uvs/-normal -vertex/-uvs/-normal) */\r\n    public static FacePattern5 = /^f\\s+(((-[\\d]{1,}\\/-[\\d]{1,}\\/-[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a line(l vertex vertex) */\r\n    public static LinePattern1 = /^l\\s+(([\\d]{1,}[\\s]?){2,})+/;\r\n    /** Pattern used to detect a second kind of line (l vertex/uvs vertex/uvs) */\r\n    public static LinePattern2 = /^l\\s+((([\\d]{1,}\\/[\\d]{1,}[\\s]?){2,})+)/;\r\n    /** Pattern used to detect a third kind of line (l vertex/uvs/normal vertex/uvs/normal) */\r\n    public static LinePattern3 = /^l\\s+((([\\d]{1,}\\/[\\d]{1,}\\/[\\d]{1,}[\\s]?){2,})+)/;\r\n\r\n    private _loadingOptions: OBJLoadingOptions;\r\n    private _positions: Array<Vector3> = []; //values for the positions of vertices\r\n    private _normals: Array<Vector3> = []; //Values for the normals\r\n    private _uvs: Array<Vector2> = []; //Values for the textures\r\n    private _colors: Array<Color4> = [];\r\n    private _meshesFromObj: Array<MeshObject> = []; //[mesh] Contains all the obj meshes\r\n    private _handledMesh: MeshObject; //The current mesh of meshes array\r\n    private _indicesForBabylon: Array<number> = []; //The list of indices for VertexData\r\n    private _wrappedPositionForBabylon: Array<Vector3> = []; //The list of position in vectors\r\n    private _wrappedUvsForBabylon: Array<Vector2> = []; //Array with all value of uvs to match with the indices\r\n    private _wrappedColorsForBabylon: Array<Color4> = []; // Array with all color values to match with the indices\r\n    private _wrappedNormalsForBabylon: Array<Vector3> = []; //Array with all value of normals to match with the indices\r\n    private _tuplePosNorm: Array<{ normals: Array<number>; idx: Array<number>; uv: Array<number> }> = []; //Create a tuple with indice of Position, Normal, UV  [pos, norm, uvs]\r\n    private _curPositionInIndices = 0;\r\n    private _hasMeshes: Boolean = false; //Meshes are defined in the file\r\n    private _unwrappedPositionsForBabylon: Array<number> = []; //Value of positionForBabylon w/o Vector3() [x,y,z]\r\n    private _unwrappedColorsForBabylon: Array<number> = []; // Value of colorForBabylon w/o Color4() [r,g,b,a]\r\n    private _unwrappedNormalsForBabylon: Array<number> = []; //Value of normalsForBabylon w/o Vector3()  [x,y,z]\r\n    private _unwrappedUVForBabylon: Array<number> = []; //Value of uvsForBabylon w/o Vector3()      [x,y,z]\r\n    private _triangles: Array<string> = []; //Indices from new triangles coming from polygons\r\n    private _materialNameFromObj: string = \"\"; //The name of the current material\r\n    private _objMeshName: string = \"\"; //The name of the current obj mesh\r\n    private _increment: number = 1; //Id for meshes created by the multimaterial\r\n    private _isFirstMaterial: boolean = true;\r\n    private _grayColor = new Color4(0.5, 0.5, 0.5, 1);\r\n    private _materialToUse: string[];\r\n    private _babylonMeshesArray: Array<Mesh>;\r\n    private _pushTriangle: (faces: Array<string>, faceIndex: number) => void;\r\n    private _handednessSign: number;\r\n\r\n    /**\r\n     * Creates a new SolidParser\r\n     * @param materialToUse defines the array to fill with the list of materials to use (it will be filled by the parse function)\r\n     * @param babylonMeshesArray defines the array to fill with the list of loaded meshes (it will be filled by the parse function)\r\n     * @param loadingOptions defines the loading options to use\r\n     */\r\n    public constructor(materialToUse: string[], babylonMeshesArray: Array<Mesh>, loadingOptions: OBJLoadingOptions) {\r\n        this._materialToUse = materialToUse;\r\n        this._babylonMeshesArray = babylonMeshesArray;\r\n        this._loadingOptions = loadingOptions;\r\n    }\r\n\r\n    /**\r\n     * Search for obj in the given array.\r\n     * This function is called to check if a couple of data already exists in an array.\r\n     *\r\n     * If found, returns the index of the founded tuple index. Returns -1 if not found\r\n     * @param arr Array<{ normals: Array<number>, idx: Array<number> }>\r\n     * @param obj Array<number>\r\n     * @returns {boolean}\r\n     */\r\n    private _isInArray(arr: Array<{ normals: Array<number>; idx: Array<number> }>, obj: Array<number>) {\r\n        if (!arr[obj[0]]) {\r\n            arr[obj[0]] = { normals: [], idx: [] };\r\n        }\r\n        const idx = arr[obj[0]].normals.indexOf(obj[1]);\r\n\r\n        return idx === -1 ? -1 : arr[obj[0]].idx[idx];\r\n    }\r\n\r\n    private _isInArrayUV(arr: Array<{ normals: Array<number>; idx: Array<number>; uv: Array<number> }>, obj: Array<number>) {\r\n        if (!arr[obj[0]]) {\r\n            arr[obj[0]] = { normals: [], idx: [], uv: [] };\r\n        }\r\n        const idx = arr[obj[0]].normals.indexOf(obj[1]);\r\n\r\n        if (idx != 1 && obj[2] === arr[obj[0]].uv[idx]) {\r\n            return arr[obj[0]].idx[idx];\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * This function set the data for each triangle.\r\n     * Data are position, normals and uvs\r\n     * If a tuple of (position, normal) is not set, add the data into the corresponding array\r\n     * If the tuple already exist, add only their indice\r\n     *\r\n     * @param indicePositionFromObj Integer The index in positions array\r\n     * @param indiceUvsFromObj Integer The index in uvs array\r\n     * @param indiceNormalFromObj Integer The index in normals array\r\n     * @param positionVectorFromOBJ Vector3 The value of position at index objIndice\r\n     * @param textureVectorFromOBJ Vector3 The value of uvs\r\n     * @param normalsVectorFromOBJ Vector3 The value of normals at index objNormale\r\n     * @param positionColorsFromOBJ\r\n     */\r\n    private _setData(\r\n        indicePositionFromObj: number,\r\n        indiceUvsFromObj: number,\r\n        indiceNormalFromObj: number,\r\n        positionVectorFromOBJ: Vector3,\r\n        textureVectorFromOBJ: Vector2,\r\n        normalsVectorFromOBJ: Vector3,\r\n        positionColorsFromOBJ?: Color4\r\n    ) {\r\n        //Check if this tuple already exists in the list of tuples\r\n        let _index: number;\r\n        if (this._loadingOptions.optimizeWithUV) {\r\n            _index = this._isInArrayUV(this._tuplePosNorm, [indicePositionFromObj, indiceNormalFromObj, indiceUvsFromObj]);\r\n        } else {\r\n            _index = this._isInArray(this._tuplePosNorm, [indicePositionFromObj, indiceNormalFromObj]);\r\n        }\r\n\r\n        //If it not exists\r\n        if (_index === -1) {\r\n            //Add an new indice.\r\n            //The array of indices is only an array with his length equal to the number of triangles - 1.\r\n            //We add vertices data in this order\r\n            this._indicesForBabylon.push(this._wrappedPositionForBabylon.length);\r\n            //Push the position of vertice for Babylon\r\n            //Each element is a Vector3(x,y,z)\r\n            this._wrappedPositionForBabylon.push(positionVectorFromOBJ);\r\n            //Push the uvs for Babylon\r\n            //Each element is a Vector3(u,v)\r\n            this._wrappedUvsForBabylon.push(textureVectorFromOBJ);\r\n            //Push the normals for Babylon\r\n            //Each element is a Vector3(x,y,z)\r\n            this._wrappedNormalsForBabylon.push(normalsVectorFromOBJ);\r\n\r\n            if (positionColorsFromOBJ !== undefined) {\r\n                //Push the colors for Babylon\r\n                //Each element is a BABYLON.Color4(r,g,b,a)\r\n                this._wrappedColorsForBabylon.push(positionColorsFromOBJ);\r\n            }\r\n\r\n            //Add the tuple in the comparison list\r\n            this._tuplePosNorm[indicePositionFromObj].normals.push(indiceNormalFromObj);\r\n            this._tuplePosNorm[indicePositionFromObj].idx.push(this._curPositionInIndices++);\r\n            if (this._loadingOptions.optimizeWithUV) {\r\n                this._tuplePosNorm[indicePositionFromObj].uv.push(indiceUvsFromObj);\r\n            }\r\n        } else {\r\n            //The tuple already exists\r\n            //Add the index of the already existing tuple\r\n            //At this index we can get the value of position, normal, color and uvs of vertex\r\n            this._indicesForBabylon.push(_index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transform Vector() and BABYLON.Color() objects into numbers in an array\r\n     */\r\n    private _unwrapData() {\r\n        //Every array has the same length\r\n        for (let l = 0; l < this._wrappedPositionForBabylon.length; l++) {\r\n            //Push the x, y, z values of each element in the unwrapped array\r\n            this._unwrappedPositionsForBabylon.push(\r\n                this._wrappedPositionForBabylon[l].x * this._handednessSign,\r\n                this._wrappedPositionForBabylon[l].y,\r\n                this._wrappedPositionForBabylon[l].z\r\n            );\r\n            this._unwrappedNormalsForBabylon.push(\r\n                this._wrappedNormalsForBabylon[l].x * this._handednessSign,\r\n                this._wrappedNormalsForBabylon[l].y,\r\n                this._wrappedNormalsForBabylon[l].z\r\n            );\r\n            this._unwrappedUVForBabylon.push(this._wrappedUvsForBabylon[l].x, this._wrappedUvsForBabylon[l].y); //z is an optional value not supported by BABYLON\r\n            if (this._loadingOptions.importVertexColors) {\r\n                //Push the r, g, b, a values of each element in the unwrapped array\r\n                this._unwrappedColorsForBabylon.push(\r\n                    this._wrappedColorsForBabylon[l].r,\r\n                    this._wrappedColorsForBabylon[l].g,\r\n                    this._wrappedColorsForBabylon[l].b,\r\n                    this._wrappedColorsForBabylon[l].a\r\n                );\r\n            }\r\n        }\r\n        // Reset arrays for the next new meshes\r\n        this._wrappedPositionForBabylon.length = 0;\r\n        this._wrappedNormalsForBabylon.length = 0;\r\n        this._wrappedUvsForBabylon.length = 0;\r\n        this._wrappedColorsForBabylon.length = 0;\r\n        this._tuplePosNorm.length = 0;\r\n        this._curPositionInIndices = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles from polygons\r\n     * It is important to notice that a triangle is a polygon\r\n     * We get 5 patterns of face defined in OBJ File :\r\n     * facePattern1 = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]\r\n     * facePattern2 = [\"1/1\",\"2/2\",\"3/3\",\"4/4\",\"5/5\",\"6/6\"]\r\n     * facePattern3 = [\"1/1/1\",\"2/2/2\",\"3/3/3\",\"4/4/4\",\"5/5/5\",\"6/6/6\"]\r\n     * facePattern4 = [\"1//1\",\"2//2\",\"3//3\",\"4//4\",\"5//5\",\"6//6\"]\r\n     * facePattern5 = [\"-1/-1/-1\",\"-2/-2/-2\",\"-3/-3/-3\",\"-4/-4/-4\",\"-5/-5/-5\",\"-6/-6/-6\"]\r\n     * Each pattern is divided by the same method\r\n     * @param faces Array[String] The indices of elements\r\n     * @param v Integer The variable to increment\r\n     */\r\n    private _getTriangles(faces: Array<string>, v: number) {\r\n        //Work for each element of the array\r\n        for (let faceIndex = v; faceIndex < faces.length - 1; faceIndex++) {\r\n            //Add on the triangle variable the indexes to obtain triangles\r\n            this._pushTriangle(faces, faceIndex);\r\n        }\r\n\r\n        //Result obtained after 2 iterations:\r\n        //Pattern1 => triangle = [\"1\",\"2\",\"3\",\"1\",\"3\",\"4\"];\r\n        //Pattern2 => triangle = [\"1/1\",\"2/2\",\"3/3\",\"1/1\",\"3/3\",\"4/4\"];\r\n        //Pattern3 => triangle = [\"1/1/1\",\"2/2/2\",\"3/3/3\",\"1/1/1\",\"3/3/3\",\"4/4/4\"];\r\n        //Pattern4 => triangle = [\"1//1\",\"2//2\",\"3//3\",\"1//1\",\"3//3\",\"4//4\"];\r\n        //Pattern5 => triangle = [\"-1/-1/-1\",\"-2/-2/-2\",\"-3/-3/-3\",\"-1/-1/-1\",\"-3/-3/-3\",\"-4/-4/-4\"];\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 1\r\n     * In this pattern we get vertice positions\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern1(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n        //For each element in the triangles array.\r\n        //This var could contains 1 to an infinity of triangles\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            // Set position indice\r\n            const indicePositionFromObj = parseInt(this._triangles[k]) - 1;\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                0,\r\n                0, // In the pattern 1, normals and uvs are not defined\r\n                this._positions[indicePositionFromObj], // Get the vectors data\r\n                Vector2.Zero(),\r\n                Vector3.Up(), // Create default vectors\r\n                this._loadingOptions.importVertexColors ? this._colors[indicePositionFromObj] : undefined\r\n            );\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 2\r\n     * In this pattern we get vertice positions and uvs\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern2(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1/1\"\r\n            //Split the data for getting position and uv\r\n            const point = this._triangles[k].split(\"/\"); // [\"1\", \"1\"]\r\n            //Set position indice\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            //Set uv indice\r\n            const indiceUvsFromObj = parseInt(point[1]) - 1;\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                0, //Default value for normals\r\n                this._positions[indicePositionFromObj], //Get the values for each element\r\n                this._uvs[indiceUvsFromObj],\r\n                Vector3.Up(), //Default value for normals\r\n                this._loadingOptions.importVertexColors ? this._colors[indicePositionFromObj] : undefined\r\n            );\r\n        }\r\n\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 3\r\n     * In this pattern we get vertice positions, uvs and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern3(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1/1/1\"\r\n            //Split the data for getting position, uv, and normals\r\n            const point = this._triangles[k].split(\"/\"); // [\"1\", \"1\", \"1\"]\r\n            // Set position indice\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            // Set uv indice\r\n            const indiceUvsFromObj = parseInt(point[1]) - 1;\r\n            // Set normal indice\r\n            const indiceNormalFromObj = parseInt(point[2]) - 1;\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                indiceNormalFromObj,\r\n                this._positions[indicePositionFromObj],\r\n                this._uvs[indiceUvsFromObj],\r\n                this._normals[indiceNormalFromObj] //Set the vector for each component\r\n            );\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 4\r\n     * In this pattern we get vertice positions and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern4(face: Array<string>, v: number) {\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1//1\"\r\n            //Split the data for getting position and normals\r\n            const point = this._triangles[k].split(\"//\"); // [\"1\", \"1\"]\r\n            // We check indices, and normals\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            const indiceNormalFromObj = parseInt(point[1]) - 1;\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                1, //Default value for uv\r\n                indiceNormalFromObj,\r\n                this._positions[indicePositionFromObj], //Get each vector of data\r\n                Vector2.Zero(),\r\n                this._normals[indiceNormalFromObj],\r\n                this._loadingOptions.importVertexColors ? this._colors[indicePositionFromObj] : undefined\r\n            );\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /*\r\n     * Create triangles and push the data for each polygon for the pattern 3\r\n     * In this pattern we get vertice positions, uvs and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern5(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"-1/-1/-1\"\r\n            //Split the data for getting position, uv, and normals\r\n            const point = this._triangles[k].split(\"/\"); // [\"-1\", \"-1\", \"-1\"]\r\n            // Set position indice\r\n            const indicePositionFromObj = this._positions.length + parseInt(point[0]);\r\n            // Set uv indice\r\n            const indiceUvsFromObj = this._uvs.length + parseInt(point[1]);\r\n            // Set normal indice\r\n            const indiceNormalFromObj = this._normals.length + parseInt(point[2]);\r\n\r\n            this._setData(\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                indiceNormalFromObj,\r\n                this._positions[indicePositionFromObj],\r\n                this._uvs[indiceUvsFromObj],\r\n                this._normals[indiceNormalFromObj], //Set the vector for each component\r\n                this._loadingOptions.importVertexColors ? this._colors[indicePositionFromObj] : undefined\r\n            );\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    private _addPreviousObjMesh() {\r\n        //Check if it is not the first mesh. Otherwise we don't have data.\r\n        if (this._meshesFromObj.length > 0) {\r\n            //Get the previous mesh for applying the data about the faces\r\n            //=> in obj file, faces definition append after the name of the mesh\r\n            this._handledMesh = this._meshesFromObj[this._meshesFromObj.length - 1];\r\n\r\n            //Set the data into Array for the mesh\r\n            this._unwrapData();\r\n\r\n            if (this._loadingOptions.useLegacyBehavior) {\r\n                // Reverse tab. Otherwise face are displayed in the wrong sens\r\n                this._indicesForBabylon.reverse();\r\n            }\r\n\r\n            //Set the information for the mesh\r\n            //Slice the array to avoid rewriting because of the fact this is the same var which be rewrited\r\n            this._handledMesh.indices = this._indicesForBabylon.slice();\r\n            this._handledMesh.positions = this._unwrappedPositionsForBabylon.slice();\r\n            this._handledMesh.normals = this._unwrappedNormalsForBabylon.slice();\r\n            this._handledMesh.uvs = this._unwrappedUVForBabylon.slice();\r\n\r\n            if (this._loadingOptions.importVertexColors) {\r\n                this._handledMesh.colors = this._unwrappedColorsForBabylon.slice();\r\n            }\r\n\r\n            //Reset the array for the next mesh\r\n            this._indicesForBabylon.length = 0;\r\n            this._unwrappedPositionsForBabylon.length = 0;\r\n            this._unwrappedColorsForBabylon.length = 0;\r\n            this._unwrappedNormalsForBabylon.length = 0;\r\n            this._unwrappedUVForBabylon.length = 0;\r\n        }\r\n    }\r\n\r\n    private _optimizeNormals(mesh: AbstractMesh): void {\r\n        const positions = mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        const normals = mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        const mapVertices: { [key: string]: number[] } = {};\r\n\r\n        if (!positions || !normals) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < positions.length / 3; i++) {\r\n            const x = positions[i * 3 + 0];\r\n            const y = positions[i * 3 + 1];\r\n            const z = positions[i * 3 + 2];\r\n            const key = x + \"_\" + y + \"_\" + z;\r\n\r\n            let lst = mapVertices[key];\r\n            if (!lst) {\r\n                lst = [];\r\n                mapVertices[key] = lst;\r\n            }\r\n            lst.push(i);\r\n        }\r\n\r\n        const normal = new Vector3();\r\n        for (const key in mapVertices) {\r\n            const lst = mapVertices[key];\r\n            if (lst.length < 2) {\r\n                continue;\r\n            }\r\n\r\n            const v0Idx = lst[0];\r\n            for (let i = 1; i < lst.length; ++i) {\r\n                const vIdx = lst[i];\r\n                normals[v0Idx * 3 + 0] += normals[vIdx * 3 + 0];\r\n                normals[v0Idx * 3 + 1] += normals[vIdx * 3 + 1];\r\n                normals[v0Idx * 3 + 2] += normals[vIdx * 3 + 2];\r\n            }\r\n\r\n            normal.copyFromFloats(normals[v0Idx * 3 + 0], normals[v0Idx * 3 + 1], normals[v0Idx * 3 + 2]);\r\n            normal.normalize();\r\n\r\n            for (let i = 0; i < lst.length; ++i) {\r\n                const vIdx = lst[i];\r\n                normals[vIdx * 3 + 0] = normal.x;\r\n                normals[vIdx * 3 + 1] = normal.y;\r\n                normals[vIdx * 3 + 2] = normal.z;\r\n            }\r\n        }\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n    }\r\n\r\n    /**\r\n     * Function used to parse an OBJ string\r\n     * @param meshesNames defines the list of meshes to load (all if not defined)\r\n     * @param data defines the OBJ string\r\n     * @param scene defines the hosting scene\r\n     * @param assetContainer defines the asset container to load data in\r\n     * @param onFileToLoadFound defines a callback that will be called if a MTL file is found\r\n     */\r\n    public parse(meshesNames: any, data: string, scene: Scene, assetContainer: Nullable<AssetContainer>, onFileToLoadFound: (fileToLoad: string) => void): void {\r\n        if (this._loadingOptions.useLegacyBehavior) {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex], faces[faceIndex + 1]);\r\n            this._handednessSign = 1;\r\n        } else if (scene.useRightHandedSystem) {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex + 1], faces[faceIndex]);\r\n            this._handednessSign = 1;\r\n        } else {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex], faces[faceIndex + 1]);\r\n            this._handednessSign = -1;\r\n        }\r\n\r\n        // Split the file into lines\r\n        const lines = data.split(\"\\n\");\r\n        // Look at each line\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i].trim().replace(/\\s\\s/g, \" \");\r\n            let result;\r\n\r\n            // Comment or newLine\r\n            if (line.length === 0 || line.charAt(0) === \"#\") {\r\n                continue;\r\n\r\n                //Get information about one position possible for the vertices\r\n            } else if (SolidParser.VertexPattern.test(line)) {\r\n                result = line.match(/[^ ]+/g)!; // match will return non-null due to passing regex pattern\r\n\r\n                // Value of result with line: \"v 1.0 2.0 3.0\"\r\n                // [\"v\", \"1.0\", \"2.0\", \"3.0\"]\r\n                // Create a Vector3 with the position x, y, z\r\n                this._positions.push(new Vector3(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3])));\r\n\r\n                if (this._loadingOptions.importVertexColors) {\r\n                    if (result.length >= 7) {\r\n                        const r = parseFloat(result[4]);\r\n                        const g = parseFloat(result[5]);\r\n                        const b = parseFloat(result[6]);\r\n\r\n                        this._colors.push(\r\n                            new Color4(r > 1 ? r / 255 : r, g > 1 ? g / 255 : g, b > 1 ? b / 255 : b, result.length === 7 || result[7] === undefined ? 1 : parseFloat(result[7]))\r\n                        );\r\n                    } else {\r\n                        // TODO: maybe push NULL and if all are NULL to skip (and remove grayColor var).\r\n                        this._colors.push(this._grayColor);\r\n                    }\r\n                }\r\n            } else if ((result = SolidParser.NormalPattern.exec(line)) !== null) {\r\n                //Create a Vector3 with the normals x, y, z\r\n                //Value of result\r\n                // [\"vn 1.0 2.0 3.0\", \"1.0\", \"2.0\", \"3.0\"]\r\n                //Add the Vector in the list of normals\r\n                this._normals.push(new Vector3(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3])));\r\n            } else if ((result = SolidParser.UVPattern.exec(line)) !== null) {\r\n                //Create a Vector2 with the normals u, v\r\n                //Value of result\r\n                // [\"vt 0.1 0.2 0.3\", \"0.1\", \"0.2\"]\r\n                //Add the Vector in the list of uvs\r\n                this._uvs.push(new Vector2(parseFloat(result[1]) * this._loadingOptions.UVScaling.x, parseFloat(result[2]) * this._loadingOptions.UVScaling.y));\r\n\r\n                //Identify patterns of faces\r\n                //Face could be defined in different type of pattern\r\n            } else if ((result = SolidParser.FacePattern3.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1/1/1 2/2/2 3/3/3\", \"1/1/1 2/2/2 3/3/3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern3(\r\n                    result[1].trim().split(\" \"), // [\"1/1/1\", \"2/2/2\", \"3/3/3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern4.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1//1 2//2 3//3\", \"1//1 2//2 3//3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern4(\r\n                    result[1].trim().split(\" \"), // [\"1//1\", \"2//2\", \"3//3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern5.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f -1/-1/-1 -2/-2/-2 -3/-3/-3\", \"-1/-1/-1 -2/-2/-2 -3/-3/-3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern5(\r\n                    result[1].trim().split(\" \"), // [\"-1/-1/-1\", \"-2/-2/-2\", \"-3/-3/-3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern2.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1/1 2/2 3/3\", \"1/1 2/2 3/3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern2(\r\n                    result[1].trim().split(\" \"), // [\"1/1\", \"2/2\", \"3/3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern1.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"f 1 2 3\", \"1 2 3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern1(\r\n                    result[1].trim().split(\" \"), // [\"1\", \"2\", \"3\"]\r\n                    1\r\n                );\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser.LinePattern1.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1 2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern1(\r\n                    result[1].trim().split(\" \"), // [\"1\", \"2\"]\r\n                    0\r\n                );\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser.LinePattern2.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1/1 2/2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern2(\r\n                    result[1].trim().split(\" \"), // [\"1/1\", \"2/2\"]\r\n                    0\r\n                );\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser.LinePattern3.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1/1/1 2/2/2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern3(\r\n                    result[1].trim().split(\" \"), // [\"1/1/1\", \"2/2/2\"]\r\n                    0\r\n                );\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if (SolidParser.GroupDescriptor.test(line) || SolidParser.ObjectDescriptor.test(line)) {\r\n                // Create a new mesh corresponding to the name of the group.\r\n                // Definition of the mesh\r\n                const objMesh: MeshObject = {\r\n                    name: line.substring(2).trim(), //Set the name of the current obj mesh\r\n                    indices: null,\r\n                    positions: null,\r\n                    normals: null,\r\n                    uvs: null,\r\n                    colors: null,\r\n                    materialName: this._materialNameFromObj,\r\n                    isObject: SolidParser.ObjectDescriptor.test(line),\r\n                };\r\n                this._addPreviousObjMesh();\r\n\r\n                //Push the last mesh created with only the name\r\n                this._meshesFromObj.push(objMesh);\r\n\r\n                //Set this variable to indicate that now meshesFromObj has objects defined inside\r\n                this._hasMeshes = true;\r\n                this._isFirstMaterial = true;\r\n                this._increment = 1;\r\n                //Keyword for applying a material\r\n            } else if (SolidParser.UseMtlDescriptor.test(line)) {\r\n                //Get the name of the material\r\n                this._materialNameFromObj = line.substring(7).trim();\r\n\r\n                //If this new material is in the same mesh\r\n\r\n                if (!this._isFirstMaterial || !this._hasMeshes) {\r\n                    //Set the data for the previous mesh\r\n                    this._addPreviousObjMesh();\r\n                    //Create a new mesh\r\n                    const objMesh: MeshObject =\r\n                        //Set the name of the current obj mesh\r\n                        {\r\n                            name: (this._objMeshName || \"mesh\") + \"_mm\" + this._increment.toString(), //Set the name of the current obj mesh\r\n                            indices: null,\r\n                            positions: null,\r\n                            normals: null,\r\n                            uvs: null,\r\n                            colors: null,\r\n                            materialName: this._materialNameFromObj,\r\n                            isObject: false,\r\n                        };\r\n                    this._increment++;\r\n                    //If meshes are already defined\r\n                    this._meshesFromObj.push(objMesh);\r\n                    this._hasMeshes = true;\r\n                }\r\n                //Set the material name if the previous line define a mesh\r\n\r\n                if (this._hasMeshes && this._isFirstMaterial) {\r\n                    //Set the material name to the previous mesh (1 material per mesh)\r\n                    this._meshesFromObj[this._meshesFromObj.length - 1].materialName = this._materialNameFromObj;\r\n                    this._isFirstMaterial = false;\r\n                }\r\n                // Keyword for loading the mtl file\r\n            } else if (SolidParser.MtlLibGroupDescriptor.test(line)) {\r\n                // Get the name of mtl file\r\n                onFileToLoadFound(line.substring(7).trim());\r\n\r\n                // Apply smoothing\r\n            } else if (SolidParser.SmoothDescriptor.test(line)) {\r\n                // smooth shading => apply smoothing\r\n                // Today I don't know it work with babylon and with obj.\r\n                // With the obj file  an integer is set\r\n            } else {\r\n                //If there is another possibility\r\n                Logger.Log(\"Unhandled expression at line : \" + line);\r\n            }\r\n        }\r\n\r\n        // At the end of the file, add the last mesh into the meshesFromObj array\r\n        if (this._hasMeshes) {\r\n            // Set the data for the last mesh\r\n            this._handledMesh = this._meshesFromObj[this._meshesFromObj.length - 1];\r\n\r\n            if (this._loadingOptions.useLegacyBehavior) {\r\n                //Reverse indices for displaying faces in the good sense\r\n                this._indicesForBabylon.reverse();\r\n            }\r\n\r\n            //Get the good array\r\n            this._unwrapData();\r\n            //Set array\r\n            this._handledMesh.indices = this._indicesForBabylon;\r\n            this._handledMesh.positions = this._unwrappedPositionsForBabylon;\r\n            this._handledMesh.normals = this._unwrappedNormalsForBabylon;\r\n            this._handledMesh.uvs = this._unwrappedUVForBabylon;\r\n\r\n            if (this._loadingOptions.importVertexColors) {\r\n                this._handledMesh.colors = this._unwrappedColorsForBabylon;\r\n            }\r\n        }\r\n\r\n        // If any o or g keyword not found, create a mesh with a random id\r\n        if (!this._hasMeshes) {\r\n            let newMaterial: Nullable<StandardMaterial> = null;\r\n            if (this._indicesForBabylon.length) {\r\n                if (this._loadingOptions.useLegacyBehavior) {\r\n                    // reverse tab of indices\r\n                    this._indicesForBabylon.reverse();\r\n                }\r\n\r\n                //Get positions normals uvs\r\n                this._unwrapData();\r\n            } else {\r\n                // There is no indices in the file. We will have to switch to point cloud rendering\r\n                for (const pos of this._positions) {\r\n                    this._unwrappedPositionsForBabylon.push(pos.x, pos.y, pos.z);\r\n                }\r\n\r\n                if (this._normals.length) {\r\n                    for (const normal of this._normals) {\r\n                        this._unwrappedNormalsForBabylon.push(normal.x, normal.y, normal.z);\r\n                    }\r\n                }\r\n\r\n                if (this._uvs.length) {\r\n                    for (const uv of this._uvs) {\r\n                        this._unwrappedUVForBabylon.push(uv.x, uv.y);\r\n                    }\r\n                }\r\n\r\n                if (this._colors.length) {\r\n                    for (const color of this._colors) {\r\n                        this._unwrappedColorsForBabylon.push(color.r, color.g, color.b, color.a);\r\n                    }\r\n                }\r\n\r\n                if (!this._materialNameFromObj) {\r\n                    // Create a material with point cloud on\r\n                    newMaterial = new StandardMaterial(Geometry.RandomId(), scene);\r\n\r\n                    newMaterial.pointsCloud = true;\r\n\r\n                    this._materialNameFromObj = newMaterial.name;\r\n\r\n                    if (!this._normals.length) {\r\n                        newMaterial.disableLighting = true;\r\n                        newMaterial.emissiveColor = Color3.White();\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Set data for one mesh\r\n            this._meshesFromObj.push({\r\n                name: Geometry.RandomId(),\r\n                indices: this._indicesForBabylon,\r\n                positions: this._unwrappedPositionsForBabylon,\r\n                colors: this._unwrappedColorsForBabylon,\r\n                normals: this._unwrappedNormalsForBabylon,\r\n                uvs: this._unwrappedUVForBabylon,\r\n                materialName: this._materialNameFromObj,\r\n                directMaterial: newMaterial,\r\n                isObject: true,\r\n            });\r\n        }\r\n\r\n        //Set data for each mesh\r\n        for (let j = 0; j < this._meshesFromObj.length; j++) {\r\n            //check meshesNames (stlFileLoader)\r\n            if (meshesNames && this._meshesFromObj[j].name) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (meshesNames.indexOf(this._meshesFromObj[j].name) === -1) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (this._meshesFromObj[j].name !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Get the current mesh\r\n            //Set the data with VertexBuffer for each mesh\r\n            this._handledMesh = this._meshesFromObj[j];\r\n            //Create a Mesh with the name of the obj mesh\r\n\r\n            scene._blockEntityCollection = !!assetContainer;\r\n            const babylonMesh = new Mesh(this._meshesFromObj[j].name, scene);\r\n            babylonMesh._parentContainer = assetContainer;\r\n            scene._blockEntityCollection = false;\r\n            this._handledMesh._babylonMesh = babylonMesh;\r\n            // If this is a group mesh, it should have an object mesh as a parent. So look for the first object mesh that appears before it.\r\n            if (!this._handledMesh.isObject) {\r\n                for (let k = j - 1; k >= 0; --k) {\r\n                    if (this._meshesFromObj[k].isObject && this._meshesFromObj[k]._babylonMesh) {\r\n                        babylonMesh.parent = this._meshesFromObj[k]._babylonMesh!;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Push the name of the material to an array\r\n            //This is indispensable for the importMesh function\r\n            this._materialToUse.push(this._meshesFromObj[j].materialName);\r\n\r\n            if (this._handledMesh.positions?.length === 0) {\r\n                //Push the mesh into an array\r\n                this._babylonMeshesArray.push(babylonMesh);\r\n                continue;\r\n            }\r\n\r\n            const vertexData: VertexData = new VertexData(); //The container for the values\r\n            //Set the data for the babylonMesh\r\n            vertexData.uvs = this._handledMesh.uvs;\r\n            vertexData.indices = this._handledMesh.indices;\r\n            vertexData.positions = this._handledMesh.positions;\r\n            if (this._loadingOptions.computeNormals) {\r\n                const normals: Array<number> = new Array<number>();\r\n                VertexData.ComputeNormals(this._handledMesh.positions, this._handledMesh.indices, normals);\r\n                vertexData.normals = normals;\r\n            } else {\r\n                vertexData.normals = this._handledMesh.normals;\r\n            }\r\n            if (this._loadingOptions.importVertexColors) {\r\n                vertexData.colors = this._handledMesh.colors;\r\n            }\r\n            //Set the data from the VertexBuffer to the current Mesh\r\n            vertexData.applyToMesh(babylonMesh);\r\n            if (this._loadingOptions.invertY) {\r\n                babylonMesh.scaling.y *= -1;\r\n            }\r\n            if (this._loadingOptions.optimizeNormals) {\r\n                this._optimizeNormals(babylonMesh);\r\n            }\r\n\r\n            //Push the mesh into an array\r\n            this._babylonMeshesArray.push(babylonMesh);\r\n\r\n            if (this._handledMesh.directMaterial) {\r\n                babylonMesh.material = this._handledMesh.directMaterial;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { ISceneLoaderPluginAsync, ISceneLoaderPluginFactory, ISceneLoaderPlugin, ISceneLoaderAsyncResult } from \"core/Loading/sceneLoader\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { WebRequest } from \"core/Misc/webRequest\";\r\nimport { MTLFileLoader } from \"./mtlFileLoader\";\r\nimport type { OBJLoadingOptions } from \"./objLoadingOptions\";\r\nimport { SolidParser } from \"./solidParser\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\n/**\r\n * OBJ file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class OBJFileLoader implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /**\r\n     * Defines if UVs are optimized by default during load.\r\n     */\r\n    public static OPTIMIZE_WITH_UV = true;\r\n    /**\r\n     * Invert model on y-axis (does a model scaling inversion)\r\n     */\r\n    public static INVERT_Y = false;\r\n    /**\r\n     * Invert Y-Axis of referenced textures on load\r\n     */\r\n    public static get INVERT_TEXTURE_Y() {\r\n        return MTLFileLoader.INVERT_TEXTURE_Y;\r\n    }\r\n\r\n    public static set INVERT_TEXTURE_Y(value: boolean) {\r\n        MTLFileLoader.INVERT_TEXTURE_Y = value;\r\n    }\r\n\r\n    /**\r\n     * Include in meshes the vertex colors available in some OBJ files.  This is not part of OBJ standard.\r\n     */\r\n    public static IMPORT_VERTEX_COLORS = false;\r\n    /**\r\n     * Compute the normals for the model, even if normals are present in the file.\r\n     */\r\n    public static COMPUTE_NORMALS = false;\r\n    /**\r\n     * Optimize the normals for the model. Lighting can be uneven if you use OptimizeWithUV = true because new vertices can be created for the same location if they pertain to different faces.\r\n     * Using OptimizehNormals = true will help smoothing the lighting by averaging the normals of those vertices.\r\n     */\r\n    public static OPTIMIZE_NORMALS = false;\r\n    /**\r\n     * Defines custom scaling of UV coordinates of loaded meshes.\r\n     */\r\n    public static UV_SCALING = new Vector2(1, 1);\r\n    /**\r\n     * Skip loading the materials even if defined in the OBJ file (materials are ignored).\r\n     */\r\n    public static SKIP_MATERIALS = false;\r\n\r\n    /**\r\n     * When a material fails to load OBJ loader will silently fail and onSuccess() callback will be triggered.\r\n     *\r\n     * Defaults to true for backwards compatibility.\r\n     */\r\n    public static MATERIAL_LOADING_FAILS_SILENTLY = true;\r\n\r\n    /**\r\n     * Loads assets without handedness conversions. This flag is for compatibility. Use it only if absolutely required. Defaults to false.\r\n     */\r\n    public static USE_LEGACY_BEHAVIOR = false;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public name = \"obj\";\r\n    /**\r\n     * Defines the extension the plugin is able to load.\r\n     */\r\n    public extensions = \".obj\";\r\n\r\n    private _assetContainer: Nullable<AssetContainer> = null;\r\n\r\n    private _loadingOptions: OBJLoadingOptions;\r\n\r\n    /**\r\n     * Creates loader for .OBJ files\r\n     *\r\n     * @param loadingOptions options for loading and parsing OBJ/MTL files.\r\n     */\r\n    constructor(loadingOptions?: OBJLoadingOptions) {\r\n        this._loadingOptions = loadingOptions || OBJFileLoader._DefaultLoadingOptions;\r\n    }\r\n\r\n    private static get _DefaultLoadingOptions(): OBJLoadingOptions {\r\n        return {\r\n            computeNormals: OBJFileLoader.COMPUTE_NORMALS,\r\n            optimizeNormals: OBJFileLoader.OPTIMIZE_NORMALS,\r\n            importVertexColors: OBJFileLoader.IMPORT_VERTEX_COLORS,\r\n            invertY: OBJFileLoader.INVERT_Y,\r\n            invertTextureY: OBJFileLoader.INVERT_TEXTURE_Y,\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            UVScaling: OBJFileLoader.UV_SCALING,\r\n            materialLoadingFailsSilently: OBJFileLoader.MATERIAL_LOADING_FAILS_SILENTLY,\r\n            optimizeWithUV: OBJFileLoader.OPTIMIZE_WITH_UV,\r\n            skipMaterials: OBJFileLoader.SKIP_MATERIALS,\r\n            useLegacyBehavior: OBJFileLoader.USE_LEGACY_BEHAVIOR,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calls synchronously the MTL file attached to this obj.\r\n     * Load function or importMesh function don't enable to load 2 files in the same time asynchronously.\r\n     * Without this function materials are not displayed in the first frame (but displayed after).\r\n     * In consequence it is impossible to get material information in your HTML file\r\n     *\r\n     * @param url The URL of the MTL file\r\n     * @param rootUrl defines where to load data from\r\n     * @param onSuccess Callback function to be called when the MTL file is loaded\r\n     * @param onFailure\r\n     */\r\n    private _loadMTL(\r\n        url: string,\r\n        rootUrl: string,\r\n        onSuccess: (response: string | ArrayBuffer, responseUrl?: string) => any,\r\n        onFailure: (pathOfFile: string, exception?: any) => void\r\n    ) {\r\n        //The complete path to the mtl file\r\n        const pathOfFile = rootUrl + url;\r\n\r\n        // Loads through the babylon tools to allow fileInput search.\r\n        Tools.LoadFile(pathOfFile, onSuccess, undefined, undefined, false, (request?: WebRequest | undefined, exception?: any) => {\r\n            onFailure(pathOfFile, exception);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Instantiates a OBJ file loader plugin.\r\n     * @returns the created plugin\r\n     */\r\n    createPlugin(): ISceneLoaderPluginAsync | ISceneLoaderPlugin {\r\n        return new OBJFileLoader(OBJFileLoader._DefaultLoadingOptions);\r\n    }\r\n\r\n    /**\r\n     * If the data string can be loaded directly.\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    public canDirectLoad(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Imports one or more meshes from the loaded OBJ data and adds them to the scene\r\n     * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene the scene the meshes should be added to\r\n     * @param data the OBJ data to load\r\n     * @param rootUrl root url to load from\r\n     * @returns a promise containing the loaded meshes, particles, skeletons and animations\r\n     */\r\n    public importMeshAsync(meshesNames: any, scene: Scene, data: any, rootUrl: string): Promise<ISceneLoaderAsyncResult> {\r\n        //get the meshes from OBJ file\r\n        return this._parseSolid(meshesNames, scene, data, rootUrl).then((meshes) => {\r\n            return {\r\n                meshes: meshes,\r\n                particleSystems: [],\r\n                skeletons: [],\r\n                animationGroups: [],\r\n                transformNodes: [],\r\n                geometries: [],\r\n                lights: [],\r\n                spriteManagers: [],\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Imports all objects from the loaded OBJ data and adds them to the scene\r\n     * @param scene the scene the objects should be added to\r\n     * @param data the OBJ data to load\r\n     * @param rootUrl root url to load from\r\n     * @returns a promise which completes when objects have been loaded to the scene\r\n     */\r\n    public loadAsync(scene: Scene, data: string, rootUrl: string): Promise<void> {\r\n        //Get the 3D model\r\n        return this.importMeshAsync(null, scene, data, rootUrl).then(() => {\r\n            // return void\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainerAsync(scene: Scene, data: string, rootUrl: string): Promise<AssetContainer> {\r\n        const container = new AssetContainer(scene);\r\n        this._assetContainer = container;\r\n\r\n        return this.importMeshAsync(null, scene, data, rootUrl)\r\n            .then((result) => {\r\n                result.meshes.forEach((mesh) => container.meshes.push(mesh));\r\n                result.meshes.forEach((mesh) => {\r\n                    const material = mesh.material;\r\n                    if (material) {\r\n                        // Materials\r\n                        if (container.materials.indexOf(material) == -1) {\r\n                            container.materials.push(material);\r\n\r\n                            // Textures\r\n                            const textures = material.getActiveTextures();\r\n                            textures.forEach((t) => {\r\n                                if (container.textures.indexOf(t) == -1) {\r\n                                    container.textures.push(t);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n                this._assetContainer = null;\r\n                return container;\r\n            })\r\n            .catch((ex) => {\r\n                this._assetContainer = null;\r\n                throw ex;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Read the OBJ file and create an Array of meshes.\r\n     * Each mesh contains all information given by the OBJ and the MTL file.\r\n     * i.e. vertices positions and indices, optional normals values, optional UV values, optional material\r\n     * @param meshesNames defines a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene defines the scene where are displayed the data\r\n     * @param data defines the content of the obj file\r\n     * @param rootUrl defines the path to the folder\r\n     * @returns the list of loaded meshes\r\n     */\r\n    private _parseSolid(meshesNames: any, scene: Scene, data: string, rootUrl: string): Promise<Array<AbstractMesh>> {\r\n        let fileToLoad: string = \"\"; //The name of the mtlFile to load\r\n        const materialsFromMTLFile: MTLFileLoader = new MTLFileLoader();\r\n        const materialToUse: string[] = [];\r\n        const babylonMeshesArray: Array<Mesh> = []; //The mesh for babylon\r\n\r\n        // Main function\r\n        const solidParser = new SolidParser(materialToUse, babylonMeshesArray, this._loadingOptions);\r\n\r\n        solidParser.parse(meshesNames, data, scene, this._assetContainer, (fileName: string) => {\r\n            fileToLoad = fileName;\r\n        });\r\n\r\n        // load the materials\r\n        const mtlPromises: Array<Promise<void>> = [];\r\n        // Check if we have a file to load\r\n        if (fileToLoad !== \"\" && !this._loadingOptions.skipMaterials) {\r\n            //Load the file synchronously\r\n            mtlPromises.push(\r\n                new Promise((resolve, reject) => {\r\n                    this._loadMTL(\r\n                        fileToLoad,\r\n                        rootUrl,\r\n                        (dataLoaded) => {\r\n                            try {\r\n                                //Create materials thanks MTLLoader function\r\n                                materialsFromMTLFile.parseMTL(scene, dataLoaded, rootUrl, this._assetContainer);\r\n                                //Look at each material loaded in the mtl file\r\n                                for (let n = 0; n < materialsFromMTLFile.materials.length; n++) {\r\n                                    //Three variables to get all meshes with the same material\r\n                                    let startIndex = 0;\r\n                                    const _indices = [];\r\n                                    let _index;\r\n\r\n                                    //The material from MTL file is used in the meshes loaded\r\n                                    //Push the indice in an array\r\n                                    //Check if the material is not used for another mesh\r\n                                    while ((_index = materialToUse.indexOf(materialsFromMTLFile.materials[n].name, startIndex)) > -1) {\r\n                                        _indices.push(_index);\r\n                                        startIndex = _index + 1;\r\n                                    }\r\n                                    //If the material is not used dispose it\r\n                                    if (_index === -1 && _indices.length === 0) {\r\n                                        //If the material is not needed, remove it\r\n                                        materialsFromMTLFile.materials[n].dispose();\r\n                                    } else {\r\n                                        for (let o = 0; o < _indices.length; o++) {\r\n                                            //Apply the material to the Mesh for each mesh with the material\r\n                                            const mesh = babylonMeshesArray[_indices[o]];\r\n                                            const material = materialsFromMTLFile.materials[n];\r\n                                            mesh.material = material;\r\n\r\n                                            if (!mesh.getTotalIndices()) {\r\n                                                // No indices, we need to turn on point cloud\r\n                                                material.pointsCloud = true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                resolve();\r\n                            } catch (e) {\r\n                                Tools.Warn(`Error processing MTL file: '${fileToLoad}'`);\r\n                                if (this._loadingOptions.materialLoadingFailsSilently) {\r\n                                    resolve();\r\n                                } else {\r\n                                    reject(e);\r\n                                }\r\n                            }\r\n                        },\r\n                        (pathOfFile: string, exception?: any) => {\r\n                            Tools.Warn(`Error downloading MTL file: '${fileToLoad}'`);\r\n                            if (this._loadingOptions.materialLoadingFailsSilently) {\r\n                                resolve();\r\n                            } else {\r\n                                reject(exception);\r\n                            }\r\n                        }\r\n                    );\r\n                })\r\n            );\r\n        }\r\n        //Return an array with all Mesh\r\n        return Promise.all(mtlPromises).then(() => {\r\n            return babylonMeshesArray;\r\n        });\r\n    }\r\n}\r\n\r\nif (SceneLoader) {\r\n    //Add this loader into the register plugin\r\n    SceneLoader.RegisterPlugin(new OBJFileLoader());\r\n}\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as Loaders from \"loaders/OBJ/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (const key in Loaders) {\r\n        if (!(<any>globalObject).BABYLON[key]) {\r\n            (<any>globalObject).BABYLON[key] = (<any>Loaders)[key];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"loaders/OBJ/index\";\r\n","import * as loaders from \"@lts/loaders/legacy/legacy-objFileLoader\";\r\nexport { loaders };\r\nexport default loaders;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__597__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","materials","parseMTL","scene","data","rootUrl","assetContainer","ArrayBuffer","color","lines","split","delimiter_pattern","material","i","length","line","trim","charAt","pos","indexOf","substring","toLowerCase","push","_blockEntityCollection","StandardMaterial","_parentContainer","map","parseFloat","diffuseColor","Color3","FromArray","ambientColor","specularColor","emissiveColor","specularPower","alpha","ambientTexture","MTLFileLoader","_GetTexture","diffuseTexture","specularTexture","values","bumpMultiplierIndex","bumpMultiplier","splice","bumpTexture","join","level","opacityTexture","url","lastDelimiter","lastIndexOf","substr","Texture","INVERT_TEXTURE_Y","materialToUse","babylonMeshesArray","loadingOptions","_positions","_normals","_uvs","_colors","_meshesFromObj","_indicesForBabylon","_wrappedPositionForBabylon","_wrappedUvsForBabylon","_wrappedColorsForBabylon","_wrappedNormalsForBabylon","_tuplePosNorm","_curPositionInIndices","_hasMeshes","_unwrappedPositionsForBabylon","_unwrappedColorsForBabylon","_unwrappedNormalsForBabylon","_unwrappedUVForBabylon","_triangles","_materialNameFromObj","_objMeshName","_increment","_isFirstMaterial","_grayColor","Color4","_materialToUse","_babylonMeshesArray","_loadingOptions","_isInArray","arr","normals","idx","_isInArrayUV","uv","_setData","indicePositionFromObj","indiceUvsFromObj","indiceNormalFromObj","positionVectorFromOBJ","textureVectorFromOBJ","normalsVectorFromOBJ","positionColorsFromOBJ","_index","optimizeWithUV","_unwrapData","l","x","_handednessSign","y","z","importVertexColors","b","a","_getTriangles","faces","v","faceIndex","_pushTriangle","_setDataForCurrentFaceWithPattern1","face","k","parseInt","Vector2","Zero","Vector3","Up","_setDataForCurrentFaceWithPattern2","point","_setDataForCurrentFaceWithPattern3","_setDataForCurrentFaceWithPattern4","_setDataForCurrentFaceWithPattern5","_addPreviousObjMesh","_handledMesh","useLegacyBehavior","reverse","indices","slice","positions","uvs","colors","_optimizeNormals","mesh","getVerticesData","VertexBuffer","PositionKind","NormalKind","mapVertices","lst","normal","v0Idx","vIdx","copyFromFloats","normalize","setVerticesData","parse","meshesNames","onFileToLoadFound","useRightHandedSystem","replace","result","SolidParser","VertexPattern","test","match","NormalPattern","exec","UVPattern","UVScaling","FacePattern3","FacePattern4","FacePattern5","FacePattern2","FacePattern1","LinePattern1","LinePattern2","LinePattern3","GroupDescriptor","ObjectDescriptor","objMesh","name","materialName","isObject","UseMtlDescriptor","toString","MtlLibGroupDescriptor","SmoothDescriptor","Logger","Log","newMaterial","Geometry","RandomId","pointsCloud","disableLighting","White","directMaterial","j","Array","babylonMesh","Mesh","_babylonMesh","parent","vertexData","VertexData","computeNormals","ComputeNormals","applyToMesh","invertY","scaling","optimizeNormals","extensions","_assetContainer","OBJFileLoader","_DefaultLoadingOptions","COMPUTE_NORMALS","OPTIMIZE_NORMALS","IMPORT_VERTEX_COLORS","INVERT_Y","invertTextureY","UV_SCALING","materialLoadingFailsSilently","MATERIAL_LOADING_FAILS_SILENTLY","OPTIMIZE_WITH_UV","skipMaterials","SKIP_MATERIALS","USE_LEGACY_BEHAVIOR","_loadMTL","onSuccess","onFailure","pathOfFile","Tools","LoadFile","request","exception","createPlugin","canDirectLoad","importMeshAsync","_parseSolid","then","meshes","particleSystems","skeletons","animationGroups","transformNodes","geometries","lights","spriteManagers","loadAsync","loadAssetContainerAsync","container","AssetContainer","forEach","getActiveTextures","t","textures","catch","ex","fileToLoad","materialsFromMTLFile","fileName","mtlPromises","Promise","resolve","reject","dataLoaded","n","startIndex","_indices","dispose","getTotalIndices","Warn","all","SceneLoader","RegisterPlugin","globalObject","BABYLON"],"sourceRoot":""}